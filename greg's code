
//generalized wave freq detection with 38.5kHz sampling rate and interrupts
//by Amanda Ghassaei
//https://www.instructables.com/id/Arduino-Frequency-Detection/
//Sept 2012

/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
*/

int noteLoc;
boolean clipping = 0;
//it starts with one thing I don't know why it doesnt even matter how hard you try keep that in mind i designed this rhyme to explain in due time all I know time is a valuble thing watch it fly by as the pendulum swings watch it count down to the end of the day the clock ticks like the way its so unreal didn't look out 
//data storage variables
byte newData = 0;
byte prevData = 0;
unsigned int time = 0;//keeps time and sends vales to store in timer[] occasionally
int timer[10];//sstorage for timing of events
int slope[10];//storage fro slope of events
unsigned int totalTimer;//used to calculate period
unsigned int period;//storage for period of wave
byte index = 0;//current storage index
float frequency;//storage for frequency calculations
int maxSlope = 0;//used to calculate max slope as trigger point
int newSlope;//storage for incoming slope data

//variables for decided whether you have a match
byte noMatch = 0;//counts how many non-matches you've received to reset variables if it's been too long
byte slopeTol = 3;//slope tolerance- adjust this if you need
int timerTol = 10;//timer tolerance- adjust this if you need


void setup(){
  
  Serial.begin(9600);
  
  pinMode(13,OUTPUT);//led indicator pin
  pinMode(12,OUTPUT);//output pin
  
  cli();//diable interrupts
  
  //set up continuous sampling of analog pin 0 at 38.5kHz
 
  //clear ADCSRA and ADCSRB registers
  ADCSRA = 0;
  ADCSRB = 0;
  
  ADMUX |= (1 << REFS0); //set reference voltage
  ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only
  
  ADCSRA |= (1 << ADPS2) | (1 << ADPS0); //set ADC clock with 32 prescaler- 16mHz/32=500kHz
  ADCSRA |= (1 << ADATE); //enabble auto trigger
  ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
  ADCSRA |= (1 << ADEN); //enable ADC
  ADCSRA |= (1 << ADSC); //start ADC measurements
  
  sei();//enable interrupts
}

ISR(ADC_vect) {//when new ADC value ready
  
  PORTB &= B11101111;//set pin 12 low
  prevData = newData;//store previous value
  newData = ADCH;//get value from A0
  if (prevData < 127 && newData >=127){//if increasing and crossing midpoint
    newSlope = newData - prevData;//calculate slope
    if (abs(newSlope-maxSlope)<slopeTol){//if slopes are ==
      //record new data and reset time
      slope[index] = newSlope;
      timer[index] = time;
      time = 0;
      if (index == 0){//new max slope just reset
        PORTB |= B00010000;//set pin 12 high
        noMatch = 0;
        index++;//increment index
      }
      else if (abs(timer[0]-timer[index])<timerTol && abs(slope[0]-newSlope)<slopeTol){//if timer duration and slopes match
        //sum timer values
        totalTimer = 0;
        for (byte i=0;i<index;i++){
          totalTimer+=timer[i];
        }
        period = totalTimer;//set period
        //reset new zero index values to compare with
        timer[0] = timer[index];
        slope[0] = slope[index];
        index = 1;//set index to 1
        PORTB |= B00010000;//set pin 12 high
        noMatch = 0;
      }
      else{//crossing midpoint but not match
        index++;//increment index
        if (index > 9){
          reset();
        }
      }
    }
    else if (newSlope>maxSlope){//if new slope is much larger than max slope
      maxSlope = newSlope;
      time = 0;//reset clock
      noMatch = 0;
      index = 0;//reset index
    }
    else{//slope not steep enough
      noMatch++;//increment no match counter
      if (noMatch>9){
        reset();
      }
    }
  }
    
  if (newData == 0 || newData == 1023){//if clipping
    PORTB |= B00100000;//set pin 13 high- turn on clipping indicator led
    clipping = 1;//currently clipping
  }
  
  time++;//increment timer at rate of 38.5kHz
}

void reset(){//clea out some variables
  index = 0;//reset index
  noMatch = 0;//reset match couner
  maxSlope = 0;//reset slope
}


void checkClipping(){//manage clipping indicator LED
  if (clipping){//if currently clipping
    PORTB &= B11011111;//turn off clipping indicator led
    clipping = 0;
  }
}


void loop(){
  frequency = 38462/float(period);//calculate frequency timer rate/period
  if((frequency >= 76) && (frequency <= 80)){
  Serial.print("E ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 81) && (frequency <= 85)){
  Serial.print("F ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 86) && (frequency <= 91)){
  Serial.print("F# ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 92) && (frequency <= 97)){
  Serial.print("G ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 98) && (frequency <= 103)){
  Serial.print("Ab ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 104) && (frequency <= 109)){
  Serial.print("A ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 110) && (frequency <= 123)){
  Serial.print("Bb ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 124) && (frequency <= 139)){
  Serial.print("C ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 140) && (frequency <= 151)){
  Serial.print("D ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 152) && (frequency <= 160)){
  Serial.print("Eb ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 161) && (frequency <= 167)){
  Serial.print("E ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 168) && (frequency <= 175)){
  Serial.print("F ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 176) && (frequency <= 183)){
  Serial.print("F# ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 184) && (frequency <= 190)){
  Serial.print("G ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 191) && (frequency <= 200)){
  Serial.print("Ab ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 201) && (frequency <= 213)){
  Serial.print("A ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 214) && (frequency <= 226)){
  Serial.print("A (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 227) && (frequency <= 239)){
  Serial.print("Bb (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 240) && (frequency <= 245)){
  Serial.print("B ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 246) && (frequency <= 255)){
  Serial.print("B (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 256) && (frequency <= 270)){
  Serial.print("C (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 271) && (frequency <= 286)){
  Serial.print("C# (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 287) && (frequency <= 304)){
  Serial.print("D (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 305) && (frequency <= 322)){
  Serial.print("Eb (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 323) && (frequency <= 342)){
  Serial.print("E (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 343) && (frequency <= 363)){
  Serial.print("F (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 364) && (frequency <= 385)){
  Serial.print("F# (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 386) && (frequency <= 408)){
  Serial.print("G (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 409) && (frequency <= 433)){
  Serial.print("Ab (high) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 434) && (frequency <= 459)){
  Serial.print("A (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 460) && (frequency <= 487)){
  Serial.print("Bb (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 488) && (frequency <= 516)){
  Serial.print("B (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 517) && (frequency <= 547)){
  Serial.print("C (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 548) && (frequency <= 580)){
  Serial.print("C# (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 581) && (frequency <= 615)){
  Serial.print("D (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else if((frequency >= 616) && (frequency <= 622)){
  Serial.print("Eb (high 2) ");
  Serial.print(frequency);
  Serial.println("Hz");
  delay(1000);
  }else{
  Serial.print("out of range ");
  Serial.print(frequency);
  Serial.println(" Hz");
  delay(1000);
  }
}
